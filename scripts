import requests
import time
import pandas as pd

# URLs de exemplo para REST e GraphQL
urls = {
    'REST': 'https://api.github.com/repos',
    'GraphQL': 'https://api.github.com/graphql'
}

# Seu token do GitHub (NÃO compartilhe seu token publicamente)
token = 'SEU_GITHUB_TOKEN_AQUI'

# Função para medir o tempo de resposta e tamanho da resposta
def measure_response(url, query=None):
    headers = {
        'Authorization': f'token {token}',
        'Content-Type': 'application/json'
    }
    start_time = time.time()
    
    if query:
        response = requests.post(url, json={'query': query}, headers=headers)
    else:
        response = requests.get(url, headers=headers)
    
    end_time = time.time()
    response_time = end_time - start_time
    response_size = len(response.content)
    
    return response_time, response_size

# Listas para armazenar os resultados
results = {
    'API': [],
    'Response Time (s)': [],
    'Response Size (bytes)': []
}

# Executar medições
for api_type, url in urls.items():
    for _ in range(30):  # Realizar 30 medições
        if api_type == 'GraphQL':
            query = """query { viewer { login } }"""  # Exemplo de query GraphQL
            response_time, response_size = measure_response(url, query)
        else:
            response_time, response_size = measure_response(url)
        
        results['API'].append(api_type)
        results['Response Time (s)'].append(response_time)
        results['Response Size (bytes)'].append(response_size)

# Converter resultados para DataFrame
df = pd.DataFrame(results)
df.to_csv('experiment_results.csv', index=False)
print("Dados coletados e salvos em 'experiment_results.csv'")
